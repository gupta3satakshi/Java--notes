An interface in Java is a blueprint of a class. It has static constants and abstract methods.
The interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not the method body. It is used to achieve abstraction and multiple inheritances in Java. 
It cannot be instantiated just like the abstract class. Since Java 8, we can have default and static methods in an interface. Since Java 9, we can have private methods in an interface. By interface, we can support the functionality of multiple inheritances. It can be used to achieve loose coupling. A class that implements an interface must implement all the methods declared in the interface.
Using & Implementing Interface
The implements keyword is used to implement an interface. The interface keyword is used to declare a special type of class that only contains abstract methods. To access the interface methods, the interface must be "implemented‚Äù by another class with the implements keyword (instead of extends). The body of the interface method is provided by the "implement" class.
When we define a new interface, we are defining a new reference data type. We can use interface names anywhere we can use any other data type name. If we define a reference variable whose type is an interface, any object you assign to it must be an instance of a class that implements the interface.
