Exception handling is one of the most important features of java programming that allows us to handle the runtime errors caused by exceptions.
An Exception is an unwanted event that interrupts the normal flow of the program. When an exception occurs program execution gets terminated.
In such cases, we get a system-generated error message. The good thing about exceptions is that they can be handled in Java.
By handling the exceptions, we can provide a meaningful message to the user about the issue rather than a system-generated message, which may not be understandable to a user.
There are two types of exceptions in Java:
•1)Checked exceptions
•2)Unchecked exceptions

Checked exceptions - All exceptions other than Runtime Exceptions are known as Checked exceptions as the compiler checks them during compilation to see whether the programmer has handled them or not. If these exceptions are not handled/declared in the program, you will get a compilation error. For example, SQLException, IOException, ClassNotFoundException, etc.

Unchecked Exceptions - Runtime Exceptions are also known as Unchecked Exceptions. These exceptions are not checked at compile time so the compiler does not check whether the programmer has handled them or not but it’s the responsibility of the programmer to handle these exceptions and provide a safe exit. For example, ArithmeticException,

NullPointerException, ArrayIndexOutOfBoundsException, etc. The compiler will never force you to catch such an exception or force you to declare it in the method using the throws keyword.

Exception handling:
Whenever inside a method, an exception has occurred, the method creates an Object known as an Exception Object and hands it off to the run-time system (JVM). The exception object contains the name and description of the exception and the current state of the program where the exception has occurred. Creating the Exception Object and handling it in the run-time system is called throwing an Exception. There might be a list of the methods that had been called to get to the method where an exception occurred. This ordered list of methods is called Call Stack.
The run-time system searches the call stack to find the method that contains a block of code that can handle the occurred exception.
The block of the code is called an Exception handler.
The run-time system starts searching from the method in which the exception occurred and proceeds through the call stack in the reverse order in which methods were called.
If it finds an appropriate handler, then it passes the occurred exception to it. An appropriate handler means the type of exception object thrown matches the type of exception object it can handle.
If the run-time system searches all the methods on the call stack and couldn’t have found the appropriate handler, then the run-time system handover the Exception Object to the default exception handler, which is part of the run-time system.
This handler prints the exception information in the following format and terminates the program abnormally.
The Java throw keyword is used to throw an exception explicitly. We specify the exception object which is to be thrown. The Exception has some message with it that provides the error description. These exceptions may be related to user inputs, server, etc. We can throw either checked or unchecked exceptions in Java by throw keyword. It is mainly used to throw a custom exception. We can also define our own set of conditions and throw an exception explicitly using throw keyword.

The Java throws keywordis used to declare an exception. It gives an information to the programmer that there may occur an exception. So, it is better for the programmer to provide the exception handling code so that the normal flow of the program can be maintained. Exception Handling is mainly used to handle the checked exceptions. If there occurs any unchecked exception such as NullPointerException, it is programmers' fault that he is not checking the code before it being used.

Creating user defined exceptions:
In Java, we can create our own exceptions that are derived classes of the Exception class. Creating our own Exception is known as custom exception or user-defined exception. Basically, Java custom exceptions are used to customize the exception according to user need. Java provides us the facility to create our own exceptions which are basically derived classes of Exception. Creating our own Exception is known as a custom exception or user-defined exception. Basically, Java custom exceptions are used to customize the exception according to user needs. In simple words, we can say that a User-Defined Exception or custom exception is creating your own exception class and throwing that exception using the ‘throw’ keyword. In order to create a custom exception, we need to extend the Exception class that belongs to java.lang package.

Chained Exception:
Chained Exceptions allows to relate one exception with another exception, i.e., one exception describes cause of another exception. For example, consider a situation in which a method throws an ArithmeticException because of an attempt to divide by zero but the actual cause of exception was an I/O error which caused the divisor to be zero. The method will throw only ArithmeticException to the caller. So, the caller would not come to know about the actual cause of exception.

Methods Of Throwable class Which support chained exceptions in java :

•getCause() method :- This method returns actual cause of an exception.•initCause(Throwable cause) method :- This method sets the cause for the calling exception.

Assertion:
Assertion is a statement in java. It can be used to test your assumptions about the program. While executing assertion, it is believed to be true. If it fails, JVM will throw an error named AssertionError. It is mainly used for testing purpose. It provides an effective way to detect and correct programming errors. Assertions are mainly used to check logically impossible situations. For example, they can be used to check the state a code expects before it starts running or the state after it finishes running. Unlike normal exception/error handling, assertions are generally disabled at run-time.

Chained exception and assertion are two important concepts in Java programming that are used to improve error handling and debugging in software development.
Chained Exception: Sometimes, when an exception occurs in a program, it may be useful to know the cause of the exception. This is where chained exceptions come in. A chained exception is an exception that is caused by another exception. In Java, this can be achieved by passing the cause exception as an argument to the constructor of the new exception.

Assertion: Assertions are another feature of Java that allow developers to check if certain conditions are met during runtime. They are typically used for debugging purposes, and can help identify problems in the code before they cause bigger issues.


Key takeaways from this chapter
In Java, user-defined exceptions can be created by extending the built-in Exception or RuntimeException class. This allows developers to create custom exception classes that can be thrown and caught like any other exception.

To create a user-defined exception, follow these steps:

1. Create a new class that extends either Exception or RuntimeException. This class will serve as the custom exception.
2. Add a constructor that takes a String message parameter, which will be used to set the error message for the exception.
3. Within the constructor, call the super() method to initialize the parent Exception or RuntimeException class.
4. Optionally, you can add additional constructors that take different parameters to provide more flexibility in how the exception is created.
